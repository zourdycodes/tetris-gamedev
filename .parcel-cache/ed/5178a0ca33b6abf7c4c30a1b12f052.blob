{"mappings":"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","sources":["./js/tetris.js"],"sourcesContent":["const cvs = document.getElementById(\"tetris\");\nconst ctx = cvs.getContext(\"2d\");\nconst scoreElement = document.getElementById(\"score\");\n\nconst ROW = 20;\nconst COL = (COLUMN = 10);\nconst SQ = (squareSize = 20);\nconst VACANT = \"WHITE\"; // color of an empty square\n\n// draw a square\nfunction drawSquare(x, y, color) {\n  ctx.fillStyle = color;\n  ctx.fillRect(x * SQ, y * SQ, SQ, SQ);\n\n  ctx.strokeStyle = \"BLACK\";\n  ctx.strokeRect(x * SQ, y * SQ, SQ, SQ);\n}\n\n// create the board\n\nlet board = [];\nfor (r = 0; r < ROW; r++) {\n  board[r] = [];\n  for (c = 0; c < COL; c++) {\n    board[r][c] = VACANT;\n  }\n}\n\n// draw the board\nfunction drawBoard() {\n  for (r = 0; r < ROW; r++) {\n    for (c = 0; c < COL; c++) {\n      drawSquare(c, r, board[r][c]);\n    }\n  }\n}\n\ndrawBoard();\n\n// the pieces and their colors\n\nconst PIECES = [\n  [Z, \"red\"],\n  [S, \"green\"],\n  [T, \"yellow\"],\n  [O, \"blue\"],\n  [L, \"purple\"],\n  [I, \"cyan\"],\n  [J, \"orange\"],\n];\n\n// generate random pieces\n\nfunction randomPiece() {\n  let r = (randomN = Math.floor(Math.random() * PIECES.length)); // 0 -> 6\n  return new Piece(PIECES[r][0], PIECES[r][1]);\n}\n\nlet p = randomPiece();\n\n// The Object Piece\n\nfunction Piece(tetromino, color) {\n  this.tetromino = tetromino;\n  this.color = color;\n\n  this.tetrominoN = 0; // we start from the first pattern\n  this.activeTetromino = this.tetromino[this.tetrominoN];\n\n  // we need to control the pieces\n  this.x = 3;\n  this.y = -2;\n}\n\n// fill function\n\nPiece.prototype.fill = function (color) {\n  for (r = 0; r < this.activeTetromino.length; r++) {\n    for (c = 0; c < this.activeTetromino.length; c++) {\n      // we draw only occupied squares\n      if (this.activeTetromino[r][c]) {\n        drawSquare(this.x + c, this.y + r, color);\n      }\n    }\n  }\n};\n\n// draw a piece to the board\n\nPiece.prototype.draw = function () {\n  this.fill(this.color);\n};\n\n// undraw a piece\n\nPiece.prototype.unDraw = function () {\n  this.fill(VACANT);\n};\n\n// move Down the piece\n\nPiece.prototype.moveDown = function () {\n  if (!this.collision(0, 1, this.activeTetromino)) {\n    this.unDraw();\n    this.y++;\n    this.draw();\n  } else {\n    // we lock the piece and generate a new one\n    this.lock();\n    p = randomPiece();\n  }\n};\n\n// move Right the piece\nPiece.prototype.moveRight = function () {\n  if (!this.collision(1, 0, this.activeTetromino)) {\n    this.unDraw();\n    this.x++;\n    this.draw();\n  }\n};\n\n// move Left the piece\nPiece.prototype.moveLeft = function () {\n  if (!this.collision(-1, 0, this.activeTetromino)) {\n    this.unDraw();\n    this.x--;\n    this.draw();\n  }\n};\n\n// rotate the piece\nPiece.prototype.rotate = function () {\n  let nextPattern =\n    this.tetromino[(this.tetrominoN + 1) % this.tetromino.length];\n  let kick = 0;\n\n  if (this.collision(0, 0, nextPattern)) {\n    if (this.x > COL / 2) {\n      // it's the right wall\n      kick = -1; // we need to move the piece to the left\n    } else {\n      // it's the left wall\n      kick = 1; // we need to move the piece to the right\n    }\n  }\n\n  if (!this.collision(kick, 0, nextPattern)) {\n    this.unDraw();\n    this.x += kick;\n    this.tetrominoN = (this.tetrominoN + 1) % this.tetromino.length; // (0+1)%4 => 1\n    this.activeTetromino = this.tetromino[this.tetrominoN];\n    this.draw();\n  }\n};\n\nlet score = 0;\n\nPiece.prototype.lock = function () {\n  for (r = 0; r < this.activeTetromino.length; r++) {\n    for (c = 0; c < this.activeTetromino.length; c++) {\n      // we skip the vacant squares\n      if (!this.activeTetromino[r][c]) {\n        continue;\n      }\n      // pieces to lock on top = game over\n      if (this.y + r < 0) {\n        alert(\"Game Over\");\n        // stop request animation frame\n        gameOver = true;\n        break;\n      }\n      // we lock the piece\n      board[this.y + r][this.x + c] = this.color;\n    }\n  }\n  // remove full rows\n  for (r = 0; r < ROW; r++) {\n    let isRowFull = true;\n    for (c = 0; c < COL; c++) {\n      isRowFull = isRowFull && board[r][c] != VACANT;\n    }\n    if (isRowFull) {\n      // if the row is full\n      // we move down all the rows above it\n      for (y = r; y > 1; y--) {\n        for (c = 0; c < COL; c++) {\n          board[y][c] = board[y - 1][c];\n        }\n      }\n      // the top row board[0][..] has no row above it\n      for (c = 0; c < COL; c++) {\n        board[0][c] = VACANT;\n      }\n      // increment the score\n      score += 10;\n    }\n  }\n  // update the board\n  drawBoard();\n\n  // update the score\n  scoreElement.innerHTML = score;\n};\n\n// collision fucntion\n\nPiece.prototype.collision = function (x, y, piece) {\n  for (r = 0; r < piece.length; r++) {\n    for (c = 0; c < piece.length; c++) {\n      // if the square is empty, we skip it\n      if (!piece[r][c]) {\n        continue;\n      }\n      // coordinates of the piece after movement\n      let newX = this.x + c + x;\n      let newY = this.y + r + y;\n\n      // conditions\n      if (newX < 0 || newX >= COL || newY >= ROW) {\n        return true;\n      }\n      // skip newY < 0; board[-1] will crush our game\n      if (newY < 0) {\n        continue;\n      }\n      // check if there is a locked piece alrady in place\n      if (board[newY][newX] != VACANT) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n// CONTROL the piece\n\ndocument.addEventListener(\"keydown\", CONTROL);\n\nfunction CONTROL(event) {\n  if (event.keyCode == 37) {\n    p.moveLeft();\n    dropStart = Date.now();\n  } else if (event.keyCode == 38) {\n    p.rotate();\n    dropStart = Date.now();\n  } else if (event.keyCode == 39) {\n    p.moveRight();\n    dropStart = Date.now();\n  } else if (event.keyCode == 40) {\n    p.moveDown();\n  }\n}\n\n// drop the piece every 1sec\n\nlet dropStart = Date.now();\nlet gameOver = false;\nfunction drop() {\n  let now = Date.now();\n  let delta = now - dropStart;\n  if (delta > 1000) {\n    p.moveDown();\n    dropStart = Date.now();\n  }\n  if (!gameOver) {\n    requestAnimationFrame(drop);\n  }\n}\n\ndrop();\n"],"names":["$4bbf91818e02e64fd3b2a4b97c625bbc$var$ctx","document","getElementById","getContext","$4bbf91818e02e64fd3b2a4b97c625bbc$var$scoreElement","$4bbf91818e02e64fd3b2a4b97c625bbc$var$COL","COLUMN","$4bbf91818e02e64fd3b2a4b97c625bbc$var$SQ","squareSize","$4bbf91818e02e64fd3b2a4b97c625bbc$var$VACANT","$4bbf91818e02e64fd3b2a4b97c625bbc$var$drawSquare","x","y","color","fillStyle","fillRect","strokeStyle","strokeRect","$4bbf91818e02e64fd3b2a4b97c625bbc$var$board","r","c","$4bbf91818e02e64fd3b2a4b97c625bbc$var$drawBoard","$4bbf91818e02e64fd3b2a4b97c625bbc$var$PIECES","Z","S","T","O","L","I","J","$4bbf91818e02e64fd3b2a4b97c625bbc$var$randomPiece","randomN","Math","floor","random","length","$4bbf91818e02e64fd3b2a4b97c625bbc$var$Piece","$4bbf91818e02e64fd3b2a4b97c625bbc$var$p","tetromino","this","tetrominoN","activeTetromino","prototype","fill","draw","unDraw","moveDown","collision","lock","moveRight","moveLeft","rotate","nextPattern","kick","$4bbf91818e02e64fd3b2a4b97c625bbc$var$score","alert","$4bbf91818e02e64fd3b2a4b97c625bbc$var$gameOver","isRowFull","innerHTML","piece","newX","newY","addEventListener","event","keyCode","$4bbf91818e02e64fd3b2a4b97c625bbc$var$dropStart","Date","now","$4bbf91818e02e64fd3b2a4b97c625bbc$var$drop","requestAnimationFrame"],"version":3,"file":"index.HASH_REF_5f9e29787cce95be3027cdf911208536.js.map"}